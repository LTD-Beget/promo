syntax = "proto3";

package beget.promo.v1.ny2023;
import "google/api/annotations.proto";

service Ny2023Service {
    rpc getInfo (GetInfoRequest) returns (GetInfoResponse) {
        option (google.api.http) = {
            get: "/v1/promo/ny2023"
        };
    }

    rpc getQuestState (GetQuestStateRequest) returns (GetQuestStateResponse) {
        option (google.api.http) = {
            get: "/v1/promo/ny2023/quest"
        };
    }

    rpc submitQuestForm (SubmitQuestFormRequest) returns (SubmitQuestFormResponse) {
        option (google.api.http) = {
            post: "/v1/promo/ny2023/quest"
            body: "*"
        };
    }

    rpc addSocialLink (AddSocialLinkRequest) returns (AddSocialLinkResponse) {
        option (google.api.http) = {
            post: "/v1/promo/ny2023/link"
            body: "*"
        };
    }
}

message GetInfoRequest {
}

message GetInfoResponse {
    bool promo_available = 1;

    bool quest_completed = 2; // квест завершён хотя бы один раз
    bool links_submitted = 3; // отправлено максимально возможное число ссылок
    bool payment_completed = 4; // совершён платеж в рамках акции

    int32 discount_rate = 5; // скидка, полученная при прохождении квеста с учётом доп. заданий

    repeated SocialLink social_link = 6;
}

message GetQuestStateRequest {
}

message GetQuestStateResponse {
    int32 attempts_left = 1;
    QuestLocation current_location = 2;
}

message SubmitQuestFormRequest {
    string location_id = 1;
    string answer = 2;
}

message SubmitQuestFormResponse {
    oneof result {
        QuestLocation next_location = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            _ = 0;
            LOCATION_ID_MISMATCH = 1; // текущая локация не совпадает с той, для которой отправлен ответ
            ANSWER_REQUIRED = 2; // необходим ответ на вопрос (нет дефолтного значения)
            INVALID_CHOICE = 3; // номер ответа выходит за допустимый диапазон
        }
    }
}

message QuestLocation {
    string location_id = 1;
    string description = 2;
    string image_url = 3;

    string visited_at = 4; // время перехода на локацию в формате RFC3399
    string current_time = 5; // текущее время в формате RFC3339, чтобы рассчитать остаток таймера
    int32 timer_seconds = 6; // на локации ограничено время на ответ, если пользователь не успел, по окончании нужно отправить пустой ответ автоматически

    repeated string choice = 7;
    QuestionType question_type = 8;

    enum QuestionType {
        CHOICE = 0; // в качестве ответа нужно передать порядковый номер варианта (нумерация с 1)
        TEXT = 1; // пользователь сам должен ввести текст, он передается в качестве ответа "как есть"
    }
}

message AddSocialLinkRequest {
    string url = 1;
}

message AddSocialLinkResponse {
    oneof result {
        SocialLink link = 1;
        Error error = 2;
    }

    message Error {
        Code code = 1;
        string message = 2;

        enum Code {
            _ = 0;
            INVALID_LINK = 1; // ссылка не похожа на ссылку
            UNSUPPORTED_LINK = 2; // ссылка похожа на ссылку, но не на поддерживаемую соц. сеть
            LINK_ALREADY_SUBMITTED = 3; // такая же ссылка уже была отправлена
            PLATFORM_ALREADY_SUBMITTED = 4; // для данной соц. сети ссылка уже отправлена
        }
    }
}

message SocialLink {
    string platform = 1; // тип соц. сети
    string url = 2;
}
